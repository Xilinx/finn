pipeline {
  agent none
  parameters {
    booleanParam(name: 'fpgadataflow', defaultValue: false, description: 'Run fpgadataflow tests')
    booleanParam(name: 'sanity', defaultValue: true, description: 'Run sanity hardware and unit tests')
    booleanParam(name: 'end2end', defaultValue: false, description: 'Run end2end tests')
  }
  stages {
    stage('Sanity Tests') {
      parallel {
        stage('Sanity - Build Hardware') {
          when {
            expression { return params['sanity'] }
          }
          agent {
            label 'finn-build'
          }
          environment {
            TEST_NAME = "bnn_build_sanity"
            FINN_HOST_BUILD_DIR = "${env.FINN_HOST_BUILD_DIR}/${env.TEST_NAME}"
          }
          steps {
            catchError(stageResult: 'FAILURE') {
              script {
                // Creates dir in finn clone to store build files for stashing
                sh "mkdir -p ${env.TEST_NAME}"
                cleanPreviousBuildFiles(env.FINN_HOST_BUILD_DIR)

                // Pass in the marker to run with pytest and the XML test results filename
                runDockerPytestWithMarker("sanity_bnn", "${env.TEST_NAME}", '')

                // Find the board's build files (bitstreams/xclbins) and zip for use on the boards themselves
                findCopyZip("Pynq-Z1", env.FINN_HOST_BUILD_DIR, env.TEST_NAME, "sanity_PynqZ1_zip")
                findCopyZip("ZCU104", env.FINN_HOST_BUILD_DIR, env.TEST_NAME, "sanity_ZCU104_zip")
                findCopyZip("KV260_SOM", env.FINN_HOST_BUILD_DIR, env.TEST_NAME, "sanity_KV260_SOM_zip")
                findCopyZip("U250", env.FINN_HOST_BUILD_DIR, env.TEST_NAME, "sanity_U250_zip")

                // Stash the test results file(s)
                stash name: "${env.TEST_NAME}", includes: "${env.TEST_NAME}.xml,${env.TEST_NAME}.html"

                // Use an env variable to help collect test results later in pipeline
                env.BNN_BUILD_SANITY = "SUCCESS"
              }
            }
          }
        }
        stage('Sanity - Unit Tests') {
          when {
            expression { params['sanity'] }
          }
          agent {
            label 'finn-build'
          }
          environment {
            TEST_NAME = "sanity_ut"
            FINN_HOST_BUILD_DIR = "${env.FINN_HOST_BUILD_DIR}/${env.TEST_NAME}"
          }
          steps {
            catchError(stageResult: 'FAILURE') {
              script {
                cleanPreviousBuildFiles(env.FINN_HOST_BUILD_DIR)

                // Multiple markers with pytest needs its own script
                createMultiMarkerScript("util or brevitas_export or streamline or transform or notebooks", "${env.TEST_NAME}", "--cov --cov-report=html:coverage_sanity_ut")
                sh './run-docker.sh ./run-tests.sh'

                // Stash the test results file(s)
                stash name: env.TEST_NAME, includes: "${env.TEST_NAME}.xml,${env.TEST_NAME}.html"

                // Use an env variable to help collect test results later in pipeline
                env.SANITY_UT = "SUCCESS"

                // Archive coverage report if successful
                archiveSuccessfulStage(env.SANITY_UT, "coverage_sanity_ut")
              }
            }
          }
        }
        stage('Sanity - fpgadataflow Tests') {
          when {
            expression { params['fpgadataflow'] }
          }
          agent {
            label 'finn-build'
          }
          environment {
            TEST_NAME = "fpgadataflow"
            FINN_HOST_BUILD_DIR = "${env.FINN_HOST_BUILD_DIR}/${env.TEST_NAME}"
          }
          steps {
            catchError(stageResult: 'FAILURE') {
              script {
                cleanPreviousBuildFiles(env.FINN_HOST_BUILD_DIR)

                // Pass in the marker to run with pytest and the XML test results filename
                runDockerPytestWithMarker("fpgadataflow", "${env.TEST_NAME}", "--cov --cov-report=html:coverage_fpgadataflow")

                // Stash the test results file(s)
                stash name: env.TEST_NAME, includes: "${env.TEST_NAME}.xml,${env.TEST_NAME}.html"

                // Use an env variable to help collect test results later in pipeline
                env.FPGADATAFLOW_RESULT = "SUCCESS"

                // Archive coverage report if successful
                archiveSuccessfulStage(env.FPGADATAFLOW_RESULT, "coverage_fpgadataflow")
              }
            }
          }
        }
      }
    }
    stage('End2end - Build Hardware') {
      parallel {
        stage('End2end') {
          when {
            expression { params['end2end'] }
          }
          agent {
            label 'finn-build'
          }
          environment {
            TEST_NAME = "end2end"
            FINN_HOST_BUILD_DIR = "${env.FINN_HOST_BUILD_DIR}/${env.TEST_NAME}"
          }
          steps {
            catchError(stageResult: 'FAILURE') {
              script {
                // Delete any build files from a previous build
                cleanPreviousBuildFiles(env.FINN_HOST_BUILD_DIR)

                // Pass in the marker to run with pytest and the XML test results filename
                runDockerPytestWithMarker(env.TEST_NAME, "${env.TEST_NAME}", '')

                // Stash the test results file(s)
                stash name: env.TEST_NAME, includes: "${env.TEST_NAME}.xml,${env.TEST_NAME}.html"

                // Use an env variable to help collect test results later in pipeline
                env.END2END_RESULT = "SUCCESS"
              }
            }
          }
        }
        stage('BNN end2end - U250') {
          when {
            expression { return params['end2end'] }
          }
          agent {
            label 'finn-build'
          }
          environment {
            BOARD = "U250"
            TEST_NAME = "bnn_build_full"
            FINN_HOST_BUILD_DIR = "${env.FINN_HOST_BUILD_DIR}/${env.TEST_NAME}_${env.BOARD}"
          }
          steps {
            catchError(stageResult: 'FAILURE') {
              script {
                // Creates dir in finn clone to store build files for stashing
                sh "mkdir -p ${env.TEST_NAME}"
                cleanPreviousBuildFiles(env.FINN_HOST_BUILD_DIR)

                // Pass in the marker to run with pytest and the XML test results filename
                runDockerPytestWithMarker("bnn_u250", "${env.TEST_NAME}_${env.BOARD}", '')
                findCopyZip(env.BOARD, env.FINN_HOST_BUILD_DIR, env.TEST_NAME, "${env.BOARD}_zip")

                // Stash the test results file(s)
                stash name: "${env.TEST_NAME}_${env.BOARD}", includes: "${env.TEST_NAME}_${env.BOARD}.xml,${env.TEST_NAME}_${env.BOARD}.html"

                // Use an env variable to help collect test results later in pipeline
                env.BNN_BUILD_U250 = "SUCCESS"
              }
            }
          }
        }
        stage('BNN end2end - Pynq-Z1') {
          when {
            expression { return params['end2end'] }
          }
          agent {
            label 'finn-build'
          }
          environment {
            BOARD = "Pynq-Z1"
            TEST_NAME = "bnn_build_full"
            FINN_HOST_BUILD_DIR = "${env.FINN_HOST_BUILD_DIR}/${env.TEST_NAME}_${env.BOARD}"
          }
          steps {
            catchError(stageResult: 'FAILURE') {
              script {
                // Creates dir in finn clone to store build files for stashing
                sh "mkdir -p ${env.TEST_NAME}"
                cleanPreviousBuildFiles(env.FINN_HOST_BUILD_DIR)

                // Pass in the marker to run with pytest and the XML test results filename
                runDockerPytestWithMarker("bnn_pynq", "${env.TEST_NAME}_${env.BOARD}", '')
                findCopyZip(env.BOARD, env.FINN_HOST_BUILD_DIR, env.TEST_NAME, "PynqZ1_zip")

                // Stash the test results file(s)
                stash name: "${env.TEST_NAME}_PynqZ1", includes: "${env.TEST_NAME}_${env.BOARD}.xml,${env.TEST_NAME}_${env.BOARD}.html"

                // Use an env variable to help collect test results later in pipeline
                env.BNN_BUILD_PYNQZ1 = "SUCCESS"
              }
            }
          }
        }
        stage('BNN end2end - ZCU104') {
          when {
            expression { return params['end2end'] }
          }
          agent {
            label 'finn-build'
          }
          environment {
            BOARD = "ZCU104"
            TEST_NAME = "bnn_build_full"
            FINN_HOST_BUILD_DIR = "${env.FINN_HOST_BUILD_DIR}/${env.TEST_NAME}_${env.BOARD}"
          }
          steps {
            catchError(stageResult: 'FAILURE') {
              script {
                // Creates dir in finn clone to store build files for stashing
                sh "mkdir -p ${env.TEST_NAME}"
                cleanPreviousBuildFiles(env.FINN_HOST_BUILD_DIR)

                // Pass in the marker to run with pytest and the XML test results filename
                runDockerPytestWithMarker("bnn_zcu104", "${env.TEST_NAME}_${env.BOARD}", '')
                findCopyZip(env.BOARD, env.FINN_HOST_BUILD_DIR, env.TEST_NAME, "${env.BOARD}_zip")

                // Stash the test results file(s)
                stash name: "${env.TEST_NAME}_${env.BOARD}", includes: "${env.TEST_NAME}_${env.BOARD}.xml,${env.TEST_NAME}_${env.BOARD}.html"

                // Use an env variable to help collect test results later in pipeline
                env.BNN_BUILD_ZCU104 = "SUCCESS"
              }
            }
          }
        }
        stage('BNN end2end - KV260_SOM') {
          when {
            expression { return params['end2end'] }
          }
          agent {
            label 'finn-build'
          }
          environment {
            BOARD = "KV260_SOM"
            TEST_NAME = "bnn_build_full"
            FINN_HOST_BUILD_DIR = "${env.FINN_HOST_BUILD_DIR}/${env.TEST_NAME}_${env.BOARD}"
          }
          steps {
            catchError(stageResult: 'FAILURE') {
              script {
                // Creates dir in finn clone to store build files for stashing
                sh "mkdir -p ${env.TEST_NAME}"
                cleanPreviousBuildFiles(env.FINN_HOST_BUILD_DIR)

                // Pass in the marker to run with pytest and the XML test results filename
                runDockerPytestWithMarker("bnn_kv260", "${env.TEST_NAME}_${env.BOARD}", '')
                findCopyZip(env.BOARD, env.FINN_HOST_BUILD_DIR, env.TEST_NAME, "${env.BOARD}_zip")

                // Stash the test results file(s)
                stash name: "${env.TEST_NAME}_${env.BOARD}", includes: "${env.TEST_NAME}_${env.BOARD}.xml,${env.TEST_NAME}_${env.BOARD}.html"

                // Use an env variable to help collect test results later in pipeline
                env.BNN_BUILD_KV260_SOM = "SUCCESS"
              }
            }
          }
        }
      }
    }
    stage('Sanity & BNN end2end - Setup Hardware Tests') {
      when {
        expression { return params['sanity'] }
      }
      agent {
        label 'finn-build'
      }
      steps {
        script {
          // Check which boards are online before running HW tests
          env.ALVEO_HOST_ONLINE = isNodeOnline('finn-u250')
          env.PYNQ_ONLINE = isNodeOnline('finn-pynq')
          env.ZCU104_ONLINE = isNodeOnline('finn-zcu104')
          env.KV260_ONLINE = isNodeOnline('finn-kv260')

          // Stash the HW test scripts to be used on slave nodes
          dir('docker/jenkins') {
            stash name: 'bnn_test_files', includes: 'test_bnn_hw_pytest.py'
          }
        }
      }
    }
    stage('Sanity - Run Hardware Tests') {
      parallel {
        stage('BNN Sanity - U250') {
          when {
            // beforeAgent set to 'true' to prevent an offline agent hanging the stage
            beforeAgent true
            expression { return (env.ALVEO_HOST_ONLINE == 'true' && params['sanity'] && env.BNN_BUILD_SANITY == 'SUCCESS') }
          }
          agent {
            label 'finn-u250'
          }
          environment {
            BOARD = 'U250'
          }
          steps {
            catchError(stageResult: 'FAILURE') {
              script {
                // Clean any files from a previous run
                cleanPreviousBuildFiles("${env.BOARD}*")

                // Get the test files
                unstash name: "sanity_${env.BOARD}_zip"
                sh "unzip -o ${env.BOARD}.zip"

                dir(env.BOARD) {
                  // Get the scripts necessary for running hw tests
                  unstash name: 'bnn_test_files'

                  // Create test script
                  createTestScript(env.BOARD, env.BOARD, "sanity_bnn_test_hw_${env.BOARD}")

                  // Use an env variable to help collect test results later in pipeline
                  env.SANITY_BNN_TEST_U250 = "SUCCESS"

                  // Execute the script
                  sh './run-tests.sh'
                }
              }
            }
          }
          post {
            always {
              dir(env.BOARD) {
                // Collect the results file on the slave node by stashing
                stash name: "xml_sanity_bnn_test_${env.BOARD}", includes: "sanity_bnn_test_hw_${env.BOARD}.xml,sanity_bnn_test_hw_${env.BOARD}.html"
              }
            }
          }
        }
        stage('BNN Sanity - Pynq-Z1') {
          when {
            // beforeAgent set to 'true' to prevent an offline agent hanging the stage
            beforeAgent true
            expression { return (env.PYNQ_ONLINE == 'true' && params['sanity'] && env.BNN_BUILD_SANITY == 'SUCCESS') }
          }
          agent {
            label 'finn-pynq'
          }
          environment {
            BOARD = 'Pynq-Z1'
            USER_CREDENTIALS = credentials('pynq-z1-credentials')
          }
          steps {
            catchError(stageResult: 'FAILURE') {
              script {
                // Clean any files from a previous run
                cleanPreviousBoardBuildFiles("${env.BOARD}*")

                // Get the test files
                unstash name: "sanity_PynqZ1_zip"
                sh "unzip -o ${env.BOARD}.zip"

                dir(env.BOARD) {
                  // Get the scripts necessary for running hw tests
                  unstash name: 'bnn_test_files'

                  // Create test script
                  // The marker here omits the '-Z1' as '-' is a special character
                  // that will not work with Pytest
                  createTestScript(env.BOARD, 'Pynq', "sanity_bnn_test_hw_${env.BOARD}")

                  // Use an env variable to help collect test results later in pipeline
                  env.SANITY_BNN_TEST_PYNQZ1 = "SUCCESS"

                  // Execute the script as the root user - needed for zynq platforms
                  sh 'echo $USER_CREDENTIALS_PSW | sudo -S ./run-tests.sh'
                }
              }
            }
          }
          post {
            always {
              // Get test result file and delete test files on the board
              dir(env.BOARD) {
                // Collect the results file on the slave node by stashing
                stash name: "xml_sanity_bnn_test_PynqZ1", includes: "sanity_bnn_test_hw_${env.BOARD}.xml,sanity_bnn_test_hw_${env.BOARD}.html"
              }
            }
          }
        }
        stage('BNN Sanity - ZCU104') {
          when {
            // beforeAgent set to 'true' to prevent an offline agent hanging the stage
            beforeAgent true
            expression { return (env.ZCU104_ONLINE == 'true' && params['sanity'] && env.BNN_BUILD_SANITY == 'SUCCESS') }
          }
          agent {
            label 'finn-zcu104'
          }
          environment {
            BOARD = 'ZCU104'
            USER_CREDENTIALS = credentials('pynq-z1-credentials')
          }
          steps {
            catchError(stageResult: 'FAILURE') {
              script {
                // Clean any files from a previous run
                cleanPreviousBoardBuildFiles("${env.BOARD}*")

                // Get the test files
                unstash name: "sanity_${env.BOARD}_zip"
                sh "unzip -o ${env.BOARD}.zip"

                dir(env.BOARD) {
                  // Get the scripts necessary for running hw tests
                  unstash name: 'bnn_test_files'

                  // Create test script
                  createTestScript(env.BOARD, env.BOARD, "sanity_bnn_test_hw_${env.BOARD}")

                  // Use an env variable to help collect test results later in pipeline
                  env.SANITY_BNN_TEST_ZCU104 = "SUCCESS"

                  // Execute the script as the root user - needed for zynq platforms
                  sh 'echo $USER_CREDENTIALS_PSW | sudo -S ./run-tests.sh'
                }
              }
            }
          }
          post {
            always {
              // Get test result file and delete test files on the board
              dir(env.BOARD) {
                // Collect the results file on the slave node by stashing
                stash name: "xml_sanity_bnn_test_${env.BOARD}", includes: "sanity_bnn_test_hw_${env.BOARD}.xml,sanity_bnn_test_hw_${env.BOARD}.html"
              }
            }
          }
        }
        stage('BNN Sanity - KV260_SOM') {
          when {
            // beforeAgent set to 'true' to prevent an offline agent hanging the stage
            beforeAgent true
            expression { return (env.KV260_ONLINE == 'true' && params['sanity'] && env.BNN_BUILD_SANITY == 'SUCCESS') }
          }
          agent {
            label 'finn-kv260'
          }
          environment {
            BOARD = 'KV260_SOM'
            USER_CREDENTIALS = credentials('user-ubuntu-credentials')
          }
          steps {
            catchError(stageResult: 'FAILURE') {
              script {
                // Clean any files from a previous run
                cleanPreviousBoardBuildFiles("${env.BOARD}*")

                // Get the test files
                unstash name: "sanity_${env.BOARD}_zip"
                sh "unzip -o ${env.BOARD}.zip"

                dir(env.BOARD) {
                  // Get the scripts necessary for running hw tests
                  unstash name: 'bnn_test_files'

                  // Create test script
                  createTestScript(env.BOARD, env.BOARD, "sanity_bnn_test_hw_${env.BOARD}")

                  // Use an env variable to help collect test results later in pipeline
                  env.SANITY_BNN_TEST_KV260_SOM = "SUCCESS"

                  // Execute the script as the root user - needed for zynq platforms
                  sh 'echo $USER_CREDENTIALS_PSW | sudo -S ./run-tests.sh'
                }
              }
            }
          }
           post {
            always {
              // Get test result file and delete test files on the board
              dir(env.BOARD) {
                // Collect the results file on the slave node by stashing
                stash name: "xml_sanity_bnn_test_${env.BOARD}", includes: "sanity_bnn_test_hw_${env.BOARD}.xml,sanity_bnn_test_hw_${env.BOARD}.html"
              }
            }
          }
        }
      }
    }
    stage('End2end - Run Hardware Tests') {
      parallel {
        stage('BNN end2end - U250') {
          when {
            // beforeAgent set to 'true' to prevent an offline agent hanging the stage
            beforeAgent true
            expression { return (env.ALVEO_HOST_ONLINE == 'true' && params['end2end'] && env.BNN_BUILD_U250 == 'SUCCESS') }
          }
          agent {
            label 'finn-u250'
          }
          environment {
            BOARD = 'U250'
          }
          steps {
            catchError(stageResult: 'FAILURE') {
              script {
                // Clean any files from a previous run
                cleanPreviousBuildFiles("${env.BOARD}*")

                // Get the test files
                unstash name: "${env.BOARD}_zip"
                sh "unzip -o ${env.BOARD}.zip"

                dir(env.BOARD) {
                  // Get the scripts necessary for running hw tests
                  unstash name: 'bnn_test_files'

                  // Create test script
                  createTestScript(env.BOARD, env.BOARD, "bnn_test_hw_${env.BOARD}")

                  // Use an env variable to help collect test results later in pipeline
                  env.BNN_TEST_U250 = "SUCCESS"

                  // Execute the script
                  sh './run-tests.sh'
                }
              }
            }
          }
          post {
            always {
              dir(env.BOARD) {
                // Collect the results file on the slave node by stashing
                stash name: "xml_bnn_test_${env.BOARD}", includes: "bnn_test_hw_${env.BOARD}.xml,bnn_test_hw_${env.BOARD}.html"
              }
            }
          }
        }
        stage('BNN end2end - Pynq-Z1') {
          when {
            // beforeAgent set to 'true' to prevent an offline agent hanging the stage
            beforeAgent true
            expression { return (env.PYNQ_ONLINE == 'true' && params['end2end'] && env.BNN_BUILD_PYNQZ1 == 'SUCCESS') }
          }
          agent {
            label 'finn-pynq'
          }
          environment {
            BOARD = 'Pynq-Z1'
            USER_CREDENTIALS = credentials('pynq-z1-credentials')
          }
          steps {
            catchError(stageResult: 'FAILURE') {
              script {
                // Clean any files from a previous run
                cleanPreviousBoardBuildFiles("${env.BOARD}*")

                // Get the test files
                unstash name: "PynqZ1_zip"
                sh "unzip -o ${env.BOARD}.zip"

                dir(env.BOARD) {
                  // Get the scripts necessary for running hw tests
                  unstash name: 'bnn_test_files'

                  // Create test script
                  // The marker here omits the '-Z1' as '-' is a special character
                  // that will not work with Pytest
                  createTestScript(env.BOARD, 'Pynq', "bnn_test_hw_${env.BOARD}")

                  // Use an env variable to help collect test results later in pipeline
                  env.BNN_TEST_PYNQZ1 = "SUCCESS"

                  // Execute the script as the root user - needed for zynq platforms
                  sh 'echo $USER_CREDENTIALS_PSW | sudo -S ./run-tests.sh'
                }
              }
            }
          }
          post {
            always {
              // Get test result file and delete test files on the board
              dir(env.BOARD) {
                // Collect the results file on the slave node by stashing
                stash name: "xml_bnn_test_PynqZ1", includes: "bnn_test_hw_${env.BOARD}.xml,bnn_test_hw_${env.BOARD}.html"
              }
            }
          }
        }
        stage('BNN end2end - ZCU104') {
          when {
            // beforeAgent set to 'true' to prevent an offline agent hanging the stage
            beforeAgent true
            expression { return (env.ZCU104_ONLINE == 'true' && params['end2end'] && env.BNN_BUILD_ZCU104 == 'SUCCESS') }
          }
          agent {
            label 'finn-zcu104'
          }
          environment {
            BOARD = 'ZCU104'
            USER_CREDENTIALS = credentials('pynq-z1-credentials')
          }
          steps {
            catchError(stageResult: 'FAILURE') {
              script {
                // Clean any files from a previous run
                cleanPreviousBoardBuildFiles("${env.BOARD}*")

                // Get the test files
                unstash name: "${env.BOARD}_zip"
                sh "unzip -o ${env.BOARD}.zip"

                dir(env.BOARD) {
                  // Get the scripts necessary for running hw tests
                  unstash name: 'bnn_test_files'

                  // Create test script
                  createTestScript(env.BOARD, env.BOARD, "bnn_test_hw_${env.BOARD}")

                  // Use an env variable to help collect test results later in pipeline
                  env.BNN_TEST_ZCU104 = "SUCCESS"

                  // Execute the script as the root user - needed for zynq platforms
                  sh 'echo $USER_CREDENTIALS_PSW | sudo -S ./run-tests.sh'
                }
              }
            }
          }
          post {
            always {
              // Get test result file and delete test files on the board
              dir(env.BOARD) {
                // Collect the results file on the slave node by stashing
                stash name: "xml_bnn_test_${env.BOARD}", includes: "bnn_test_hw_${env.BOARD}.xml,bnn_test_hw_${env.BOARD}.html"
              }
            }
          }
        }
        stage('BNN end2end - KV260_SOM') {
          when {
            // beforeAgent set to 'true' to prevent an offline agent hanging the stage
            beforeAgent true
            expression { return (env.KV260_ONLINE == 'true' && params['end2end'] && env.BNN_BUILD_KV260_SOM == 'SUCCESS') }
          }
          agent {
            label 'finn-kv260'
          }
          environment {
            BOARD = 'KV260_SOM'
            USER_CREDENTIALS = credentials('user-ubuntu-credentials')
          }
          steps {
            catchError(stageResult: 'FAILURE') {
              script {
                // Clean any files from a previous run
                cleanPreviousBoardBuildFiles("${env.BOARD}*")

                // Get the test files
                unstash name: "${env.BOARD}_zip"
                sh "unzip -o ${env.BOARD}.zip"

                dir(env.BOARD) {
                  // Get the scripts necessary for running hw tests
                  unstash name: 'bnn_test_files'

                  // Create test script
                  createTestScript(env.BOARD, env.BOARD, "bnn_test_hw_${env.BOARD}")

                  // Use an env variable to help collect test results later in pipeline
                  env.BNN_TEST_KV260_SOM = "SUCCESS"

                  // Execute the script as the root user - needed for zynq platforms
                  sh 'echo $USER_CREDENTIALS_PSW | sudo -S ./run-tests.sh'
                }
              }
            }
          }
          post {
            always {
              // Get test result file and delete test files on the board
              dir(env.BOARD) {
                // Collect the results file on the slave node by stashing
                stash name: "xml_bnn_test_${env.BOARD}", includes: "bnn_test_hw_${env.BOARD}.xml,bnn_test_hw_${env.BOARD}.html"
              }
            }
          }
        }
      }
    }
    stage('Check Stage Results') {
      agent {
        label 'finn-build'
      }
      steps {
        catchError(buildResult: 'SUCCESS') {
          script {
            checkAllBoards()
          }
        }
      }
      post {
        always {
          script {
            sh 'mkdir -p reports'
            cleanPreviousBuildFiles('reports')
            dir('reports') {
              // Only unstash for stages that ran
              unstashSuccessfulStage(env.SANITY_UT, "sanity_ut")
              unstashSuccessfulStage(env.FPGADATAFLOW_RESULT, "fpgadataflow")
              unstashSuccessfulStage(env.BNN_BUILD_SANITY, "bnn_build_sanity")
              unstashSuccessfulStage(env.SANITY_BNN_TEST_U250, "xml_sanity_bnn_test_U250")
              unstashSuccessfulStage(env.SANITY_BNN_TEST_PYNQZ1, "xml_sanity_bnn_test_PynqZ1")
              unstashSuccessfulStage(env.SANITY_BNN_TEST_ZCU104, "xml_sanity_bnn_test_ZCU104")
              unstashSuccessfulStage(env.SANITY_BNN_TEST_KV260_SOM, "xml_sanity_bnn_test_KV260_SOM")
              unstashSuccessfulStage(env.END2END_RESULT, "end2end")
              unstashSuccessfulStage(env.BNN_BUILD_U250, "bnn_build_full_U250")
              unstashSuccessfulStage(env.BNN_BUILD_PYNQZ1, "bnn_build_full_PynqZ1")
              unstashSuccessfulStage(env.BNN_BUILD_ZCU104, "bnn_build_full_ZCU104")
              unstashSuccessfulStage(env.BNN_BUILD_KV260_SOM, "bnn_build_full_KV260_SOM")
              unstashSuccessfulStage(env.BNN_TEST_U250, "xml_bnn_test_U250")
              unstashSuccessfulStage(env.BNN_TEST_PYNQZ1, "xml_bnn_test_PynqZ1")
              unstashSuccessfulStage(env.BNN_TEST_ZCU104, "xml_bnn_test_ZCU104")
              unstashSuccessfulStage(env.BNN_TEST_KV260_SOM, "xml_bnn_test_KV260_SOM")
            }

            // Combine individual HTML files to one single report
            sh './run-docker.sh pytest_html_merger -i reports/ -o reports/test_report_final.html'

            // Archive the XML & HTML test results
            archiveArtifacts artifacts: "reports/*.xml"
            archiveArtifacts artifacts: "reports/*.html"

            // Plot what XML files were created during the test run
            junit 'reports/*.xml'
          }
        }
      }
    }
  }
}

void cleanPreviousBuildFiles(String buildDir) {
  // Delete any build files from a previous build
  // Previous build folders affect findCopyZip() and can cause the stage to fail
  if (!buildDir.empty) {
      sh "rm -rf ${buildDir}"
  }
}

void cleanPreviousBoardBuildFiles(String boardDir) {
  // Delete any board build files
  // Specifically used on Pynq boards which require sudo to delete
  if (!boardDir.empty) {
      sh "echo $USER_CREDENTIALS_PSW | sudo -S rm -rf ${boardDir}*"
  }
}

void createMultiMarkerScript(String markers, String testResultsFilename, String additionalOptions) {
  // Passing multiple markers when running ./run-docker.sh does not work with bash.
  // Therefore, create a script to maintain the single quotes that surround the markers
  sh """echo "#!/bin/bash
python -m pytest -m \'${markers}\' --junitxml=${testResultsFilename}.xml --html=${testResultsFilename}.html --self-contained-html ${additionalOptions}" >> run-tests.sh
    """

  // Give permissions to script
  sh 'chmod 777 run-tests.sh'
}

void runDockerPytestWithMarker(String marker, String testResultsFilename, String additionalOptions) {
  sh """./run-docker.sh python -m pytest -m ${marker} --junitxml=${testResultsFilename}.xml --html=${testResultsFilename}.html --self-contained-html ${additionalOptions}"""
}

def findBoardBuildFiles(String searchDir, String dirToFind) {
  def result = sh(script: "find $searchDir -type d -name \"$dirToFind*\"", returnStdout: true).trim()
  if (result.empty) {
      error "Directory containing '$dirToFind' not found."
  }
	return result
}

void findCopyZip(String board, String findDir, String copyDir, String stashName) {
  def buildDir = findBoardBuildFiles(findDir, "hw_deployment_${board}")
  sh "cp -r ${buildDir}/${board} ${copyDir}/"
  dir(copyDir) {
    sh "zip -r ${board}.zip ${board}/"
    stash name: stashName, includes: "${board}.zip"
  }
}

void createTestScript(String board, String marker, String testResultsFilename) {
   if(board == "U250")
    sh """echo "#!/bin/bash
. /opt/xilinx/xrt/setup.sh
. ${VENV_ACTIVATE}
python -m pytest -m ${marker} --junitxml=${testResultsFilename}.xml --html=${testResultsFilename}.html --self-contained-html" >> run-tests.sh
    """
  else
    sh """echo "#!/bin/bash
. /etc/profile.d/pynq_venv.sh
. /etc/profile.d/xrt_setup.sh
python -m pytest -m ${marker} --junitxml=${testResultsFilename}.xml --html=${testResultsFilename}.html --self-contained-html" >> run-tests.sh
    """

  // Give permissions to script
  sh 'chmod 777 run-tests.sh'
}

def isNodeOnline(String labelName) {
  Label label = Jenkins.instance.getLabel(labelName)
  def agentOnline = false

  if (label) {
    List<Node> nodes = Jenkins.instance.getNodes()

    nodes.each { node ->
      if (node.getAssignedLabels().contains(label)) {
        def computer = node.toComputer()
        if (computer && computer.isOnline()) {
          agentOnline = true
        } else {
          echo """Agent ${node.displayName} is offline"""
        }
      }
    }
  } else {
    echo """Node with label ${labelName} not found"""
  }

  return agentOnline
}

def checkAllBoards() {
  def overallResult = true

  if (env.PYNQ_ONLINE == 'false') {
    overallResult = false
  }

  if (env.ALVEO_HOST_ONLINE == 'false') {
    overallResult = false
  }

  if (env.KV260_ONLINE == 'false') {
    overallResult = false
  }

  if (env.ZCU104_ONLINE == 'false') {
    overallResult = false
  }

  return overallResult
}

void unstashSuccessfulStage(String stageEnvVariableSet, String stashName) {
  if (stageEnvVariableSet) {
    unstash stashName
  }
}

void archiveSuccessfulStage(String stageEnvVariableSet, String folder) {
  if (stageEnvVariableSet) {
    archiveArtifacts artifacts: "${folder}/**/*"
  }
}
